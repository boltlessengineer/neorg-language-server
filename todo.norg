LSP use cases discussed on: {https://github.com/nvim-neorg/neorg/issues/513}[nvim-neorg/neorg#513]

- ( ) avoid `println!` macro with clippy
- (x) include neorg-dirman as rust workspace child
- (x) remove global workspace manager. current workspace should be saved in global server state
-- (_) when parsing links, include the origin URL (or path)
-- (x) actually remove the `WS_MANAGER`
- (x) remove global document store (remove `DOC_STORE`)
- (x) reimplement references (copy from [markdown-oxide])
-- (x) change `Link` to enum: `Linkable`
-- (x) implement `iter_linkables()` for `Document`
-- (x) compare resolved links instead of directly comparing linkables
-- (x) implement goto anchor definition
-- ( ) generalize range metadata with `Mark<T>`
-- ( ) integrate with `norg-rs` crate. separate parsing logic.
--- ( ) implement rich norg syntax tree type structure.
- ( ) implement linkable completion
- ( ;# low) rename `NorgWorkspace` to `Vault` or sth. to distinguish from LSP's `Workspace`

* definition

@code
anchor -> anchor definition
link -> referenceable (file, heading)
@end

* reference

@code
linkable | referenceable -> linkable
@end

* TODO

** linkable
   @code
   enum Linkable {
       AnchorReference { markup: String },
       AnchorDefinition { markup: String, target: LinkTarget },
       Link { target: LinkTarget },
   }
   @end

** NorgBerg to cache index

make internal crate norgberg

some idea:
- norgberg /requires/ workspace root & metadata

@code rust
trait VirtualFileSystem {
    fn read_dir_all(&self, dir_path: &Path) -> io::Result<Vec<PathBuf>>;
    fn metadata(&self, path: &Path) -> io::Result<Metadata>;
    fn read_bytes(&self, path: &Path) -> io::Result<Vec<u8>>;
}
struct NorgBerg<V: VirtualFileSystem> {
    vfs: V
}
impl<V> NorgBerg<V> {
    // initiate DB
    fn init(vfs: V, db_path: &Path, path: &Path) -> Self;
    // index workspaces from given path (use path as a scope)
    fn index(&self, path: &Path) -> anyhow::Result<()>;
}
@end

norgolith flow:
~ find `workspace_root` by searching for `root.toml` (from norglith)
~ initiate DB to cache files under current workspace.

*
wiki-link workflow in my mind:
@@code
[neorg]

#hide
* References
  #(refs)
  - [neorg]{:$/doro/neorg}
  - [typst]{:$/doro/typst}
  - [commonmark]{:$/doro/commonmark}
*
@@end

`#hide` will make auto imported anchor definitions invisible

language-server will find a list with `refs` attribute and put anchor definitions under it.
*






















* Neorg-ls

** Code Actions

   - ( ) higher/lower section level
   - ( ) extract section to separate file
   - ( ) update todo state

** Formatting

   - ( ) on type formatting
   - ( ) range formatting

* Norg-fmt

* Link rules

  - headings in standard ranged tags are ignored
  - but you can link to outer object from standard ranged tag (WTH)

* Links

- {https://github.com/Feel-ix-343/markdown-oxide}[markdown-oxide]
-- {https://github.com/Feel-ix-343/markdown-oxide/issues/95}[Issue list about minimum neovim setup]
